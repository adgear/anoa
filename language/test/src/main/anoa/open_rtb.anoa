/**
3.3.3 Banner Object
The “banner” object _must_ be included directly in the impression object if the impression offered for auction is display or rich media, or it may be _optionally_ embedded in the video object to describe the companion banners available for the linear or non-linear video ad. The banner object may include a unique identifier; this can be useful if these IDs can be leveraged in the VAST response to dictate placement of the companion creatives when multiple companion ad opportunities of the same size are available on a page.
*/
banner {

  /** Width of the impression in pixels. Since some ad types are not restricted by size this field is not required, but it’s highly recommended that this information be included when possible. */
  1: int w;

  /** Height of the impression in pixels. Since some ad types are not restricted by size this field is not required, but it’s highly recommended that this information be included when possible.*/
  2: int h;

  /** Maximum width of the impression in pixels. If included, it indicates that a range of sizes is allowed with this maximum width and "w" is taken as recommended. If not included, then "w" should be considered an exact requirement.*/
  3: int wmax;

  /** Maximum height of the impression in pixels. If included, it indicates that a range of sizes is allowed with this maximum height and "h" is taken as recommended. If not included, then "h" should be considered an exact requirement.*/
  4: int hmax;

  /** Minimum width of the impression in pixels. If included, it indicates that a range of sizes is allowed with this minimum width and "w" is taken as recommended. If not included, then "w" should be considered an exact requirement.*/
  5: int wmin;

  /** Minimum height of the impression in pixels. If included, it indicates that a range of sizes is allowed with this minimum height and "h" is taken as recommended. If not included, then "h" should be considered an exact requirement.*/
  6: int hmin;

  /** Unique identifier for this banner object. Useful for tracking multiple banner objects (e.g., in companion banner array). Usually starts with 1, increasing with each object. Combination of impression id banner object should be unique.*/
  7: string id;

  /** Ad Position. Use Table 6.5 */
  8: int pos;

  /** Blocked creative types. See Table 6.2 Banner Ad Types. If blank, assume all types are allowed.*/
  9: list<int> btype;

  /** Blocked creative attributes. See Table 6.3 Creative Attributes. If blank assume all types are allowed. */
  10: list<int> battr;

  /** Whitelist of content MIME types supported. Popular MIME types include, but are not limited to “image/jpg”, “image/gif” and “application/x-shockwave-flash”.*/
  11: list<string> mimes;

  /** Specify if the banner is delivered in the top frame or in an iframe. “0” means it is not in the top frame, and “1” means that it is.*/
  12: int topframe;

  /** Specify properties for an expandable ad. See Table 6.11 Expandable Direction for possible values.*/
  13: list<int> expdir;

  /** List of supported API frameworks for this banner. (See Table 6.4 API Frameworks). If an API is not explicitly listed it is assumed not to be supported.*/
  14: list<int> api;
}


/**
3.3.4 Video Object
The “video” object _must_ be included directly in the impression object if the impression offered for auction is an in-stream video ad opportunity.
Note that for the video object, many of the fields are non-essential for a minimally viable exchange interfaces. These parameters do not necessarily need to be specified to the bidder, if they are always the same for all impression, of if the exchange chooses not to supply the additional information to the bidder.
*/
video {

  /** Content MIME types supported. Popular MIME types include, but are not limited to “video/x-ms- wmv” for Windows Media, and “video/x-flv” for Flash Video.*/
  1: list<string> mimes;

  /** Minimum video ad duration in seconds.*/
  2: int(-1) minduration;

  /** Maximum video ad duration in seconds.*/
  3: int(-1) maxduration;

  /** Video bid response protocols. See Table 6.7 Video Bid Response Protocols for a list of possible values. NOTE: Use “protocols” when multiple protocols are supported. Its use is also highly recommended even for one since this “protocol” attribute is likely to be deprecated in a future version.
      At least one supported protocol must be specified in either the “protocol” or “protocols” attribute.*/
  4: int protocol;

  /** Video bid response protocols. See Table 6.7 Video Bid Response Protocols for a list of possible values.
      At least one supported protocol must be specified in either the “protocol” or “protocols” attribute.*/
  5: list<int> protocols;

  /** Width of the player in pixels. This field is not required, but it’s highly recommended that this information be included.*/
  6: int w;

  /** Height of the player in pixels. This field is not required, but it’s highly recommended that this information be included.*/
  7: int h;

  /** Indicates the start delay in seconds for preroll, midroll, or postroll ad placement. See Table 6.9 Video Start Delay for generic placement values.*/
  8: int startdelay;

  /** Indicates whether the ad impression must be linear, non- linear or can be of any type (field not set). See Table 6.6 Video Linearity for a list of the possible values and recommended bidder interpretation.*/
  9: int linearity;

  /** If multiple ad impressions are offered in the same bid request, the sequence number will allow for the coordinated delivery of multiple creatives.*/
  10: int(1) sequence;

  /** Blocked creative attributes. See Table 6.3 Creative Attributes. If blank assume all types are allowed.*/
  11: list<int> battr;

  /** Maximum extended video ad duration, if extension is allowed. If blank or 0, extension is not allowed. If -1, extension is allowed, and there is no time limit imposed. If greater than 0, then the value represents the number of seconds of extended play supported beyond the maxduration value.*/
  12: int maxextended;

  /** Minimum bit rate in Kbps. Exchange may set this dynamically, or universally across their set of publishers.*/
  13: int minbitrate;

  /** Maximum bit rate in Kbps. Exchange may set this dynamically, or universally across their set of publishers.*/
  14: int maxbitrate;

  /** If exchange publisher has rules preventing letter boxing of 4x3 content to play in a 16x9 window, then this should be set to false. Default setting is true, which assumes that boxing of content to fit into a window is allowed. “1” indicates boxing is allowed. “0” indicates it is not allowed.*/
  15: int(1) boxingallowed;

  /** List of allowed playback methods. If blank, assume that all are allowed. See Table 6.8 Video Playback Methods for a list of possible values.*/
  16: list<int> playbackmethod;

  /** List of supported delivery methods (streaming, progressive). If blank, assume all are supported. See Table 6.12 Content Delivery Methods for a list of possible values.*/
  17: list<int> deliverymethod;

  /** Ad Position (see table 6.5). Default: unknown.*/
  18: int pos;

  /** If companion ads are available, they can be listed as an array of banner objects. See Banner Object.*/
  19: list<banner> companionad;

  /** List of supported API frameworks for this impression. (See Table 6.4 API Frameworks). If an API is not explicitly listed it is assumed not to be supported.*/
  20: list<int> api;

  /** Recommended if companion objects are included. See Table 6.17 VAST Companion Types for a list of possible values.*/
  21: list<int> vast_companion_type;
}


/**
3.3.17 Direct Deals Object
A “deal” object constitutes a deal struck a priori between a buyer and a seller and indicates that this impression is available under the terms of that deal.
*/
deal {

  /** A unique identifier for the direct deal.*/
  1: string id;

  /** Bid floor for this impression (in CPM of bidfloorcur).*/
  2: double bidfloor;

  /** If bid floor is specified and multiple currencies supported per bid request, then currency should be specified here using ISO- 4217 alphabetic codes. Note, this may be different from bid currency returned by bidder, if this is allowed on an exchange.*/
  3: string("USD") bidfloorcur;

  /** Array of buyer seats allowed to bid on this Direct Deal. Seats are an optional feature of an exchange. For example, [“4”,”34”,”82”,”45”] indicates that only advertisers using these exchange seats are allowed to bid on this direct deal.*/
  4: list<string> wseat;

  /** Array of advertiser domains allowed to bid on this Direct Deal. For example, [“advertiser1.com”,”advertiser2.com”] indicates that only the listed advertisers are allowed to bid on this direct deal.*/
  5: list<string> wadomain;

  /** Auction type. If “1”, then first price auction. If “2”, then second price auction. If “3”, the passed bidfloor indicates the apriori agreed upon deal price. Additional auction types can be defined as per the exchange’s business rules.*/
  6: int at;
}


/**
3.3.16 PMP Object
The “pmp” object contains a parent object for usage within the context of private marketplaces and the use of the RTB protocol to execute Direct Deals.
*/
pmp {

  /** An integer flag indicating that this impression is a private auction eligible only to seats named in the Direct Deals object. (e.g., 1 = bids for this impression are restricted to the deals specified and the terms thereof; 0 = all bids are accepted) */
  1: int private_auction;

  /** A collection of “deal” objects encapsulating a list of direct deals eligible for this impression.*/
  2: list<deal> deals;
}


/**
3.3.2 Impression Object
The “imp” object describes the ad position or impression being auctioned. A single bid request can include multiple “imp” objects, a use case for which might be an exchange that supports selling all ad positions on a given page as a bundle. Each “imp” object has a required ID so that bids can reference them individually. An exchange can also conduct private auctions by restricting involvement to specific subsets of seats within bidders.
*/
impression {

  /** A unique identifier for this impression within the context of the bid request (typically, value starts with 1, and increments up to n for n impressions).*/
  1: string id;

  /** A reference to a banner object. Either a banner or video object (or both if the impression could be either) must be included in an impression object. See Banner Object.*/
  2: banner banner;

  /** A reference to a video object. Either a banner or video object (or both if the impression could be either) must be included in an impression object. See Video Object.*/
  3: video video;

  /** Name of ad mediation partner, SDK technology, or native player responsible for rendering ad (typically video or mobile). Used by some ad servers to customize ad code by partner.*/
  4: string displaymanager;

  /** Version of ad mediation partner, SDK technology, or native player responsible for rendering ad (typically video or mobile). Used by some ad servers to customize ad code by partner.*/
  5: string displaymanagerver;

  /** 1 if the ad is interstitial or full screen; else 0 (i.e., no).*/
  6: int instl;

  /** Identifier for specific ad placement or ad tag that was used to initiate the auction. This can be useful for debugging of any issues, or for optimization by the buyer.*/
  7: string tagid;

  /** Bid floor for this impression (in CPM of bidfloorcur).*/
  8: double bidfloor;

  /** If bid floor is specified and multiple currencies supported per bid request, then currency should be specified here using ISO-4217 alphabetic codes. Note, this may be different from bid currency returned by bidder, if this is allowed on an exchange.*/
  9: string("USD") bidfloorcur;

  /** Flag to indicate whether the impression requires secure HTTPS URL creative assets and markup. A value of “1” means that the impression requires secure assets. A value of "0" means non-secure assets. If this field is omitted the bidder should interpret the secure state is unknown and assume HTTP is supported.*/
  10: int secure;

  /** Array of names for supported iframe busters. Exchange specific.*/
  11: list<string> iframebuster;

  /** A reference to the PMP object containing any Deals eligible for the impression object. See the PMP Object definition.*/
  12: pmp pmp;
}


/**
3.3.8 Publisher Object
The publisher object itself and all of its parameters are optional, so default values are not provided. If an optional parameter is not specified, it should be considered unknown.
*/
publisher {

  /** Publisher ID on the exchange. */
  1: string id;

  /** Publisher name (may be masked at publisher’s request).*/
  2: string name;

  /** Array of IAB content categories for the publisher. See Table 6.1 Content Categories.*/
  3: list<string> cat;

  /** Publisher’s highest level domain name, for example “foopub.com”.*/
  4: string domain;
}


/**
3.3.9 Producer Object
The producer is useful when content where the ad is shown is syndicated, and may appear on a completely different publisher. The producer object itself and all of its parameters are optional, so default values are not provided. If an optional parameter is not specified, it should be considered unknown. This object is optional, but useful if the content producer is different from the site publisher.
*/
producer {

  /** Content producer or originator ID. Useful if content is syndicated, and may be posted on a site using embed tags.*/
  1: string id;

  /** Content producer or originator name (e.g., “Warner Bros”).*/
  2: string name;

  /** Array of IAB content categories for the content producer. See Table 6.1 Content Categories.*/
  3: list<string> cat;

  /** URL of the content producer.*/
  4: string domain;
}


/**
3.3.7 Content Object
The content object itself and all of its parameters are optional, so default values are not provided. If an optional parameter is not specified, it should be considered unknown. This object describes the content in which the impression will appear (may be syndicated or non- syndicated content).
This object may be useful in the situation where syndicated content contains impressions and does not necessarily match the publisher’s general content. The exchange might or might not have knowledge of the page where the content is running, as a result of the syndication method. (For example, video impressions embedded in an iframe on an unknown web property or device.)
*/
content {

  /** ID uniquely identifying the content.*/
  1: string id;

  /** Content episode number (typically applies to video content).*/
  2: int episode;

  /** Content title.
           Video examples: “Search Committee” (television) or “A New Hope” (movie) or “Endgame” (made for web)
           Non-video example: “Why an Antarctic Glacier Is Melting So Quickly” (Time magazine article)*/
  3: string title;

  /** Content series.
           Video examples: “The Office” (television) or “Star Wars” (movie) or “Arby ‘N’ The Chief” (made for web)
           Non-video example: “Ecocentric” (Time magazine blog)*/
  4: string series;

  /** Content season. E.g., “Season 3” (typically applies to video content).*/
  5: string season;

  /** Original URL of the content, for buy-side contextualization or review.*/
  6: string url;

  /** Array of IAB content categories for the content. See Table 6.1 Content Categories.*/
  7: list<string> cat;

  /** Video quality per the IAB’s classification. See Table 6.14 Video Quality.*/
  8: int videoquality;

  /** Comma separated list of keywords describing the content.*/
  9: string keywords;

  /** Content rating (e.g., MPAA)*/
  10: string contentrating;

  /** User rating of the content (e.g., number of stars, likes, etc.).*/
  11: string userrating;

  /** Specifies the type of content (game, video, text, etc.). See Table 6.13 Content Context.*/
  12: string context;

  /** Is content live? E.g., live video stream, live blog. “1” means content is live. “0” means it is not live.*/
  13: int livestream;

  /** 1 for “direct”; 0 for “indirect”.*/
  14: int sourcerelationship;

  /** See Producer Object.*/
  15: producer producer;

  /** Length of content (appropriate for video or audio) in seconds.*/
  16: int len;

  /** Media rating of the content, per QAG guidelines. See Table 0 QAG Media Ratings for list of possible values.*/
  17: int qagmediarating;

  /** From QAG Video Addendum. If content can be embedded (such as an embeddable video player) this value should be set to “1”. If content cannot be embedded, then this should be set to “0”.*/
  18: int embeddable;

  /** Language of the content. Use alpha-2/ISO 639-1 codes.*/
  19: string language;
}

/**
3.3.5 Site Object
A site object should be included if the ad supported content is part of a website (as opposed to an application). A bid request must not contain both a site object and an app object.
The site object itself and all of its parameters are optional, so default values are not provided. If an optional parameter is not specified, it should be considered unknown. At a minimum, it’s useful to provide a page URL or a site ID, but this is not strictly required.
*/
site {

  /** Site ID on the exchange.*/
  1: string id;

  /** Site name (may be masked at publisher’s request).*/
  2: string name;

  /** Domain of the site, used for advertiser side blocking. For example, “foo.com”.*/
  3: string domain;

  /** Array of IAB content categories for the overall site. See Table 6.1 Content Categories.*/
  4: list<string> cat;

  /** Array of IAB content categories for the current subsection of the site. See Table 6.1 Content Categories.*/
  5: list<string> sectioncat;

  /** Array of IAB content categories for the current page. See Table 6.1 Content Categories.*/
  6: list<string> pagecat;

  /** URL of the page where the impression will be shown.*/
  7: string page;

  /** Specifies whether the site has a privacy policy. “1” means there is a policy. “0” means there is not.*/
  8: int privacypolicy;

  /** Referrer URL that caused navigation to the current page.*/
  9: string ref;

  /** Search string that caused navigation to the current page.*/
  10: string search;

  /** See Publisher Object.*/
  11: publisher publisher;

  /** See Content Object.*/
  12: content content;

  /** List of keywords describing this site in a comma separated string.*/
  13: string keywords;
}


/**
3.3.6 App Object
An “app” object should be included if the ad supported content is part of a mobile application (as opposed to a mobile website). A bid request must not contain both an “app” object and a “site” object.
The app object itself and all of its parameters are optional, so default values are not provided. If an optional parameter is not specified, it should be considered unknown. At a minimum, it’s useful to provide an App ID or bundle, but this is not strictly required.
*/
app {

  /** Application ID on the exchange.*/
  1: string id;

  /** Application name (may be masked at publisher’s request).*/
  2: string name;

  /** Domain of the application (e.g., “mygame.foo.com”).*/
  3: string domain;

  /** Array of IAB content categories for the overall application. See Table 6.1 Content Categories.*/
  4: list<string> cat;

  /** Array of IAB content categories for the current subsection of the app. See Table 6.1 Content Categories.*/
  5: list<string> sectioncat;

  /** Array of IAB content categories for the current page/view of the app. See Table 6.1 Content Categories.*/
  6: list<string> pagecat;

  /** Application version.*/
  7: string ver;

  /** Application bundle or package name (e.g., com.foo.mygame). This is intended to be a unique ID across multiple exchanges.*/
  8: string bundle;

  /** Specifies whether the app has a privacy policy. “1” means there is a policy and “0” means there is not.*/
  9: int privacypolicy;

  /** “1” if the application is a paid version; else “0” (i.e., free).*/
  10: int paid;

  /** See Publisher Object.*/
  11: publisher publisher;

  /** See Content Object.*/
  12: content content;

  /** List of keywords describing this app in a comma separated string.*/
  13: string keywords;

  /** For QAG 1.5 compliance, an app store URL for an installed app should be passed in the bid request.*/
  14: string storeurl;
}


/**
3.3.11 Geo Object
The geo object itself and all of its parameters are optional, so default values are not provided. If an optional parameter is not specified, it should be considered unknown.
Note that the Geo Object may appear in one or both the Device Object and the User Object. This is intentional, since the information may be derived from either a device-oriented source (such as IP geo lookup), or by user registration information (for example provided to a publisher through a user registration). If the information is in conflict, it’s up to the bidder to determine which information to use.
*/
geo {

  /** Latitude from -90 to 90. South is negative. This should only be passed if known to be accurate (For example, not the centroid of a postal code).*/
  1: float lat;

  /** Longitude from -180 to 180. West is negative. This should only be passed if known to be accurate.*/
  2: float lon;

  /** Country using ISO-3166-1 Alpha-3.*/
  3: string country;

  /** Region using ISO 3166-2.*/
  4: string region;

  /** Region of a country using FIPS 10-4 notation (alternative to ISO 3166-2).*/
  5: string regionfips104;

  /** Pass the metro code (seehttp://code.google.com/apis/adwords/docs/appendix/metrocodes.html). Metro codes are similar to but not exactly the same as Nielsen DMAs.*/
  6: string metro;

  /** City using United Nations Code for Trade and Transport Locations (http://www.unece.org/cefact/locode/ser vice/location.htm).*/
  7: string city;

  /** Zip/postal code.*/
  8: string zip;

  /** Indicate the source of the geo data (GPS, IP address, user provided). See Table 6.15 Location Type for a list of potential values. Type should be provided when lat/lon is provided.*/
  9: int type;
}


/**
3.3.10 Device Object
The “device” object provides information pertaining to the device including its hardware, platform, location, and carrier. This device can refer to a mobile handset, a desktop computer, set top box or other digital device.
The device object itself and all of its parameters are optional, so default values are not provided. If an optional parameter is not specified, it should be considered unknown.
In general, the most essential fields are either the IP address (to enable geo-lookup for the bidder), or providing geo information directly in the geo object.
*/
device {

  /** If “0”, then do not track Is set to false, if “1”, then do no track is set to true in browser. */
  1: int dnt;

  /** Browser user agent string.*/
  2: string ua;

  /** IPv4 address closest to device.*/
  3: string ip;

  /** Geography as derived from the device’s location services (e.g., cell tower triangulation, GPS) or IP address. See Geo Object.*/
  4: geo geo;

  /** SHA1 hashed device ID; IMEI when available, else MEID or ESN. OpenRTB’s preferred method for device ID hashing is SHA1.*/
  5: string didsha1;

  /** MD5 hashed device ID; IMEI when available, else MEID or ESN. Should be interpreted as case insensitive.*/
  6: string didmd5;

  /** SHA1 hashed platform-specific ID (e.g., Android ID or UDID for iOS). OpenRTB’s preferred method for device ID hash is SHA1.*/
  7: string dpidsha1;

  /** MD5 hashed platform-specific ID (e.g., Android ID or UDID for iOS). Should be interpreted as case insensitive.*/
  8: string dpidmd5;

  /** SHA1 hashed MAC address of the device.*/
  9: string macsha1;

  /** MD5 hashed MAC address of the device.*/
  10: string macmd5;

  /** IP address in IPv6.*/
  11: string ipv6;

  /** Carrier or ISP derived from the IP address. Should be specified using Mobile Network Code (MNC) http://en.wikipedia.org/wiki/Mobile_Network_Code */
  12: string carrier;

  /** Browser language; use alpha-2/ISO 639-1 codes.*/
  13: string language;

  /** Device make (e.g., “Apple”).*/
  14: string make;

  /** Device model (e.g., “iPhone”).*/
  15: string model;

  /** Device operating system (e.g., “iOS”).*/
  16: string os;

  /** Device operating system version (e.g., “3.1.2”).*/
  17: string osv;

  /** “1” if the device supports JavaScript; else “0”.*/
  18: int js;

  /** Return the detected data connection type for the device. See Table 6.10 Connection Type.*/
  19: int connectiontype;

  /** Return the device type being used. See Table 6.16 Device Type.*/
  20: int devicetype;

  /** Return the Flash version detected.*/
  21: string flashver;

  /** Native identifier for advertisers; an opaque ID assigned by the device or browser for use as an advertising identifier. (e.g. Apple's IFA, Android's Advertising ID, etc)*/
  22: string ifa;
}


/**
3.3.14 Segment Object
The data and segment objects together allow data about the user to be passed to bidders in the bid request. Segment objects convey specific units of information from the provider identified in the parent data object.
The segment object itself and all of its parameters are optional, so default values are not provided; if an optional parameter is not specified, it should be considered unknown.
*/
segment {

  /** ID of a data provider’s segment applicable to the user. */
  1: string id;

  /** Name of a data provider’s segment applicable to the user. */
  2: string name;

  /** String representing the value of the segment. The method for transmitting this data should be negotiated offline with the data provider. For example for gender, “male”, or “female”, for age, “30-40”).*/
  3: string value;
}


/**
3.3.13 Data Object
The data and segment objects together allow data about the user to be passed to bidders in the bid request. This data may be from multiple sources (e.g., the exchange itself, third party providers) as specified by the data object ID field. A bid request can mix data objects from multiple providers.
The data object itself and all of its parameters are optional, so default values are not provided. If an optional parameter is not specified, it should be considered unknown.
*/
data {

  /** Exchange specific ID for the data provider. */
  1: string id;

  /** Data provider name.*/
  2: string name;

  /** Array of segment objects.*/
  3: list<segment> segment;
}

/**
3.3.12 User Object
The “user” object contains information known or derived about the human user of the device. Note that the user ID is an exchange artifact (refer to the “device” object for hardware or platform derived IDs) and may be subject to rotation policies. However, this user ID must be stable long enough to serve reasonably as the basis for frequency capping.
The user object itself and all of its parameters are optional, so default values are not provided. If an optional parameter is not specified, it should be considered unknown.
If device ID is used as a proxy for unique user ID, use the device object.
*/
user {

  /** Unique consumer ID of this user on the exchange. */
  1: string id;

  /** Buyer’s user ID for this user as mapped by exchange for the buyer. (AdGear cookie) */
  2: string buyeruid;

  /** Year of birth as a 4-digit integer.*/
  3: int yob;

  /** Gender as “M” male, “F” female, “O” Other. (Null indicates unknown).*/
  4: string gender;

  /** Comma separated list of keywords of consumer interests or intent.*/
  5: string keywords;

  /** If supported by the exchange, this is custom data that the bidder had stored in the exchange’s cookie. The string may be in base85 cookie safe characters, and be in any format. This may useful for storing user features. Note: Proper JSON encoding must be used to include “escaped” quotation marks.*/
  6: string customdata;

  /** Home geo for the user (e.g., based off of registration data); this is different from the current location of the access device (that is defined by the geo object embedded in the Device Object); see Geo Object.*/
  7: geo geo;

  /** See Data Object.*/
  8: list<data> data;
}


/**
3.3.15 Regulations Object
The “regs” object contains any legal, governmental, or industry regulations that apply to the request.
The first regulation added signal whether or not the request falls under the United States Federal Trade Commission’s regulations for the United States Children’s Online Privacy Protection Act (“COPPA”). See the COPPA appendix for details.
The regs object itself and all of its parameters are optional, so default values are not provided. If an optional parameter is not specified, it should be considered unknown.
*/
regulations {

  /** Flag indicating whether or not this request falls under the COPPA regulations established by the USA FTC, where 0 = no, 1 = yes.*/
  1: int coppa;
}


/**
3.3.1 Bid Request Object
The top-level bid request object contains a globally unique bid request or auction ID. This “id” attribute is required as is at least one “imp” (i.e., impression) object. Other attributes are optional since an exchange may establish default values.
*/
bid_request {

  /** Unique ID of the bid request, provided by the exchange.*/
  1: string id;

  /** Array of impression objects. Multiple impression auctions may be specified in a single bid request. At least one impression is required for a valid bid request.*/
  2: list<impression> imp;

  /** See Site Object.*/
  3: site site;

  /** See App Object.*/
  4: app app;

  /** See Device Object.*/
  5: device device;

  /** See User Object.*/
  6: user user;

  /** Auction Type. If “1”, then first price auction. If “2”, then second price auction. Additional auction types can be defined as per the exchange’s business rules. Exchange specific rules should be numbered over 500.*/
  7: int(2) at;

  /** Maximum amount of time in milliseconds to submit a bid (e.g., 120 means the bidder has 120ms to submit a bid before the auction is complete). If this value never changes across an exchange, then the exchange can supply this information offline.*/
  8: int tmax;

  /** Array of buyer seats allowed to bid on this auction. Seats are an optional feature of exchange. For example, [“4”,”34”,”82”,”A45”] indicates that only advertisers using these exchange seats are allowed to bid on the impressions in this auction.*/
  9: list<string> wseat;

  /** Flag to indicate whether Exchange can verify that all impressions offered represent all of the impressions available in context (e.g., all impressions available on the web page; all impressions available for a video [pre, mid and postroll spots], etc.) to support road-blocking. A true value should only be passed if the exchange is aware of all impressions in context for the publisher. “0” means the exchange cannot verify, and “1” means that all impressions represent all impressions available.*/
  10: int allimps;

  /** Array of allowed currencies for bids on this bid request using ISO-4217 alphabetic codes. If only one currency is used by the exchange, this parameter is not required.*/
  11: list<string> cur;

  /** Blocked Advertiser Categories. Note that there is no existing categorization / taxonomy of advertiser industries. However, as a substitute exchanges may decide to use IAB categories as an approximation (See Table 6.1 Content Categories)*/
  12: list<string> bcat;

  /** Array of strings of blocked top-level domains of advertisers. For example, {“company1.com”, “company2.com”}.*/
  13: list<string> badv;

  /** This object is a container for any legal, governmental or industry regulations in force for the request.*/
  14: regulations regs;

}


/**
4.3.3 Bid Object
For each bid, the “nurl” attribute contains the win notice URL. If the bidder wins the impression, the exchange calls this notice URL a) to inform the bidder of the win and b) to convey certain information using substitution macros (see Section 4.6 Substitution Macros).
The “adomain” attribute can be used to check advertiser block list compliance. The “iurl” attribute can provide a link to an image that is representative of the campaign’s content (irrespective of whether the campaign may have multiple creatives). This enables human review for spotting inappropriate content. The “cid” attribute can be used to block ads that were previously identified as inappropriate; essentially a safety net beyond the block lists. The “crid” attribute can be helpful in reporting creative issues back to bidders. Finally, the “attr” array indicates the creative attributes that describe the ad to be served.
BEST PRACTICE: Substitution macros may allow a bidder to use a static notice URL for all of its bids. Thus, exchanges should offer the option of a default notice URL that can be pre- configured per bidder to reduce redundant data transfer.
*/
bid {

  /** ID for the bid object chosen by the bidder for tracking and debugging purposes. Useful when multiple bids are submitted for a single impression for a given seat. */
  1: string id;

  /** ID of the impression object to which this bid applies. */
  2: string impid;

  /** Bid price in CPM. WARNING/Best Practice Note: Although this value is a float, OpenRTB strongly suggests using integer math for accounting to avoid rounding errors.*/
  3: double price;

  /** ID that references the ad to be served if the bid wins.*/
  4: string adid;

  /** Win notice URL. Note that ad markup is also typically, but not necessarily, returned via this URL.*/
  5: string nurl;

  /** Actual ad markup. XHTML if a response to a banner object, or VAST XML if a response to a video object.*/
  6: string adm;

  /** Advertiser’s primary or top-level domain for advertiser checking. This can be a list of domains if there is a rotating creative. However, exchanges may mandate that only one landing domain is allowed.*/
  7: list<string> adomain;

  /** Sample image URL (without cache busting) for content checking.*/
  8: string lurl;

  /** Campaign ID or similar that appears within the ad markup.*/
  9: string cid;

  /** Creative ID for reporting content issues or defects. This could also be used as a reference to a creative ID that is posted with an exchange.*/
  10: string crid;

  /** Array of creative attributes. See Table 6.3 Creative Attributes.*/
  11: list<int> attr;

  /** A unique identifier for the direct deal associated with the bid. If the bid is associated and in response to a dealid in the request object it is _required_ in the response object.*/
  12: string dealid;

  /** Width of the ad in pixels. If the bid request contained the wmax/hmax and wmin/hmin optional fields it is recommended that the response bid contains this field to signal the size of ad chosen.*/
  13: int w;

  /** Height of the ad in pixels. If the bid request contained the wmax/hmax and wmin/hmin optional fields it is recommended that the response bid contains this field to signal the size of ad chosen.*/
  14: int h;

}


/**
4.3.2 Seat Bid Object
A bid response can contain multiple “seatbid” objects, each on behalf of a different bidder seat. Since a bid request can include multiple impressions, each “seatbid” object can contain multiple bids each pertaining to a different impression on behalf of a seat. Thus, each “bid” object must include the impression ID to which it pertains as well as the bid price. The “group” attribute can be used to specify if a seat is willing to accept any impressions that it can win (default) or if it is only interested in winning any if it can win them all (i.e., all or nothing).
*/
seat_bid {

  /** Array of bid objects; each bid object relates to an imp object in the bid request. Note that, if supported by an exchange, one imp object can have many bid objects.*/
  1: list<bid> bid;

  /** ID of the bidder seat on whose behalf this bid is made.*/
  2: string seat;

  /** “1” means impressions must be won-lost as a group; default is “0”.*/
  3: int group;
}


/**
4.3.1 Bid Response Object
The top-level bid response object is defined below. The “id” attribute is a reflection of the bid request ID for logging purposes. Similarly, “bidid” is an optional response tracking ID for bidders. If specified, it can be included in the subsequent win notice call if the bidder wins. At least one “seatbid” object is required, which contains a bid on at least one impression. Other attributes are optional since an exchange may establish default values.
No-Bids on all impressions should be indicated as a HTTP 204 response. For no-bids on specific impressions, the bidder should omit these from the bid response.
*/
bid_response {

  /** ID of the bid request. */
  1: string id;

  /** Array of seatbid objects. */
  2: list<seat_bid> seatbid;

  /** Bid response ID to assist tracking for bidders. This value is chosen by the bidder for cross-reference.*/
  3: string bidid;

  /** Bid currency using ISO-4217 alphabetic codes; default is “USD”. */
  4: string("USD") cur;

  /** This is an optional feature, which allows a bidder to set data in the exchange’s cookie. The string may be in base85 cookie safe characters, and be in any format. This may be useful for storing user features. Note: Proper JSON encoding must be used to include “escaped” quotation marks.*/
  5: string customdata;

  /** Reason for not bidding. See Table 6.19 No-Bid Reason Codes. */
  6: int nbr;
}
