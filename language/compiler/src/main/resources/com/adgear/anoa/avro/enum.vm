#if ($schema.getNamespace())
package $schema.getNamespace();
#end

#if ($schema.getDoc())
/** $schema.getDoc() */
#end
#if ($this.isDeprecated($schema))
@Deprecated
#end
#foreach ($annotation in $this.javaAnnotations($schema))
@$annotation
#end
@org.apache.avro.specific.AvroGenerated
public enum ${this.mangle($schema.getName())} implements ${this.anoaInterfaceFullName($schema)}<${this.mangle($schema.getName())}> {
#foreach ($symbol in ${schema.getEnumSymbols()})
  ${this.mangle($symbol)}#if ($velocityHasNext),#else;#end
#end

  @Override
  public boolean isAvro() { return true; }

  @Override
  public ${this.mangle($schema.getName())} get() { return this; }

  @Override
  public int getOrdinal() { return this.ordinal(); }

  /** Returns enum instance for the given ordinal, defaults to first enum value. */
  static public ${this.mangle($schema.getName())} get(java.lang.Integer ordinal) {
    if (ordinal != null) {
      switch (ordinal) {
#set( $i = 0 )
#foreach ($symbol in ${schema.getEnumSymbols()})
        case $i: return ${this.mangle($symbol)};
#set( $i = $i + 1 )
#end
      }
    }
    return ${this.mangle($schema.getEnumSymbols().get(0))};
  }

  /** Tests if the ordinal is valid. */
  static public boolean isValid(java.lang.Integer ordinal) {
    return ordinal != null && ordinal >= 0 && ordinal < ${schema.getEnumSymbols().size()};
  }

  /** Returns enum instance for the given label, defaults to first enum value. */
  static public ${this.mangle($schema.getName())} get(java.lang.CharSequence str) {
    if (str != null) {
      switch (str.toString().toUpperCase()) {
#set( $i = 0 )
#foreach ($symbol in ${schema.getEnumSymbols()})
        case "${this.mangle($symbol)}": return ${this.mangle($symbol)};
#set( $i = $i + 1 )
#end
      }
    }
    return ${this.mangle($schema.getEnumSymbols().get(0))};
  }

  /** Tests if the label is valid. */
  static public boolean isValid(java.lang.CharSequence str) {
    if (str == null) {
      return false;
    }
    final java.lang.String s = str.toString().toUpperCase();
#set( $i = 0 )
#foreach ($symbol in ${schema.getEnumSymbols()})
#if ($i == 0)
    return s.equals("${this.mangle($symbol)}")
#set($i = 1)
#else
      || s.equals("${this.mangle($symbol)}")#end#end;
  }

  /** Returns Avro enum schema. */
  static public org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  static public final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("${this.javaEscape($schema.toString())}");

  static public final long serialVersionUID = ${this.version($schema)};
}
