${this.setSchema($schema)}
#if ($schema.getNamespace())
package $schema.getNamespace();
#end

#if ($schema.getDoc())
/** $schema.getDoc() */
#end
#if ($this.isDeprecated($schema))
@Deprecated
#end
#foreach ($annotation in $this.javaAnnotations($schema))
@$annotation
#end
public interface ${this.anoaInterfaceName()}<T>
  extends java.util.function.Supplier<T>,
          java.lang.Comparable<${this.anoaInterfaceName()}<?>>,
          java.io.Serializable {

  /** True if all fields are set to default values. */
  default boolean isDefault() {
    return
#foreach ($field in ${this.fields()})
      ${this.isDefaultMethod($field)}()#if ($velocityHasNext) &&
#else;
#end
#end
  }

  /** Returns underlying object. */
  T get();

  /** Creates a new builder based on this object. */
  Builder<T> newBuilder();
#foreach ($field in ${this.fields()})

#if ($field.doc())  /** $field.doc() */
#end
#if ($this.isDeprecated($field))  @Deprecated
#end
  ${this.exportType($field)} ${this.getMethod($field)}();

  boolean ${this.isDefaultMethod($field)}();
#foreach ($alias in $field.aliases())

  @Deprecated default ${this.exportType($field)} ${this.getMethod(${this.aliasField($field, $alias)})}() { return ${this.getMethod($field)}(); }

  @Deprecated default boolean ${this.isDefaultMethod(${this.aliasField($field, $alias)})}() { return ${this.isDefaultMethod($field)}(); }
#end
#end

  public interface Builder<T> {

    ${this.anoaInterfaceName()}<T> build();
#foreach ($field in ${this.fields()})

#if ($this.isDeprecated($field))  @Deprecated
#end
    Builder<T> ${this.setMethod($field)}(${this.importType($field)} value);

#if ($this.isDeprecated($field))  @Deprecated
#end
    Builder<T> ${this.clearMethod($field)}();
#foreach ($alias in $field.aliases())

    @Deprecated default Builder<T> ${this.setMethod(${this.aliasField($field, $alias)})}(${this.importType($field)} value) { return ${this.setMethod($field)}(value); }

    @Deprecated default Builder<T> ${this.clearMethod(${this.aliasField($field, $alias)})}() { return ${this.clearMethod($field)}(); }
#end
#end
  }

#parse( "/com/adgear/anoa/interface/record_cmp.vm" )
#if ($this.isWithNative())
#parse( "/com/adgear/anoa/interface/record_native.vm" )
#end
#if ($this.isWithAvro())
#parse( "/com/adgear/anoa/interface/record_avro.vm" )
#end
#if ($this.isWithProtobuf())
#parse( "/com/adgear/anoa/interface/record_protobuf.vm" )
#end
#if ($this.isWithThrift())
#parse( "/com/adgear/anoa/interface/record_thrift.vm" )
#end
}
