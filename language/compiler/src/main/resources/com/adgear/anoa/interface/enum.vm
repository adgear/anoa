#if ($schema.getNamespace())
package $schema.getNamespace();
#end

#if ($schema.getDoc())
/** $schema.getDoc() */
#end
#if ($this.isDeprecated($schema))
@Deprecated
#end
#foreach ($annotation in $this.javaAnnotations($schema))
@$annotation
#end
public interface ${this.anoaInterfaceName($schema)}<T> extends java.util.function.Supplier<T>, java.io.Serializable {

  enum Values implements ${this.anoaInterfaceFullName($schema)}<Values> {
#foreach ($symbol in ${schema.getEnumSymbols()})
    ${this.mangle($symbol)}#if ($velocityHasNext),
#else;
#end
#end
    @Override public Values get() { return this; }
    @Override public int getOrdinal() { return ordinal(); }
    static public final long serialVersionUID = ${this.version($schema)};
  }

  /** Returns underlying object. */
  T get();

  /** Returns enumeration ordinal. */
  default int getOrdinal() { return hashCode(); }

#set( $i = 0 )
#foreach ($symbol in ${schema.getEnumSymbols()})
  default boolean ${this.generateIsMethod($schema, $symbol)}() { return $i == getOrdinal(); }
#set( $i = $i + 1 )
#end
#if ($this.isWithAvro())

#if ($this.isDeprecated($schema))
  @Deprecated
#end
  static class Avro implements ${this.anoaInterfaceFullName($schema)}<${this.avroClassName($schema)}> {

#foreach ($symbol in ${schema.getEnumSymbols()})
    static public Avro ${this.mangle($symbol)} = new Avro(${this.avroClassName($schema)}.${this.mangle($symbol)});
#end

    final private ${this.avroClassName($schema)} wrapped;

    private Avro(${this.avroClassName($schema)} wrapped) {
      this.wrapped = wrapped;
    }

    @Override public ${this.avroClassName($schema)} get() { return wrapped; }

    @Override public boolean equals(Object other) {
      if (other == this) return true;
      if (other == null || !(other instanceof ${this.anoaInterfaceFullName($schema)})) return false;
      return wrapped.ordinal() == ((${this.anoaInterfaceFullName($schema)}) other).getOrdinal();
    }

    @Override public int hashCode() { return wrapped.ordinal(); }

    @Override public String toString() { return wrapped.toString(); }

    static public final long serialVersionUID = ${this.version($schema)};
  }

  /** Returns enum instance for the given ${this.anoaInterfaceName($schema)}. */
  static ${this.anoaInterfaceFullName($schema)}<${this.avroClassName($schema)}> avro(${this.anoaInterfaceFullName($schema)}<?> instance) {
    return avro(instance.getOrdinal());
  }

  /** Returns enum instance for the given Avro enum. */
  static ${this.anoaInterfaceFullName($schema)}<${this.avroClassName($schema)}> avro(${this.avroClassName($schema)} instance) {
    return avro(instance.ordinal());
  }

  /** Returns enum instance for the given ordinal, defaults to first enum value. */
  static ${this.anoaInterfaceFullName($schema)}<${this.avroClassName($schema)}> avro(int ordinal) {
    switch (ordinal) {
#set( $i = 0 )
#foreach ($symbol in ${schema.getEnumSymbols()})
      case $i: return Avro.${this.mangle($symbol)};
#set( $i = $i + 1 )
#end
    }
    return Avro.${this.mangle($schema.getEnumSymbols().get(0))};
  }

  /** Returns enum instance for the given label, defaults to first enum value. */
  static ${this.anoaInterfaceFullName($schema)}<${this.avroClassName($schema)}> avro(java.lang.CharSequence str) {
    if (str != null) {
      switch (str.toString().toUpperCase()) {
#foreach ($symbol in ${schema.getEnumSymbols()})
        case "${this.mangle($symbol)}": return Avro.${this.mangle($symbol)};
#end
      }
    }
    return Avro.${this.mangle($schema.getEnumSymbols().get(0))};
  }

  /** Returns Avro enum class. */
  static java.lang.Class<${this.avroClassName($schema)}> getAvroClass() {
    return ${this.avroClassName($schema)}.class;
  }

  /** Returns Avro enum schema. */
  static org.apache.avro.Schema getAvroSchema() {
    return ${this.avroClassName($schema)}.SCHEMA$;
  }
#end
#if ($this.isWithProtobuf())

#if ($this.isDeprecated($schema))
  @Deprecated
#end
  static class Protobuf implements ${this.anoaInterfaceFullName($schema)}<${this.protobufClassName($schema)}> {

#foreach ($symbol in ${schema.getEnumSymbols()})
    static public Protobuf ${this.mangle($symbol)} = new Protobuf(${this.protobufClassName($schema)}.${this.mangle($symbol)});
#end

    final private ${this.protobufClassName($schema)} wrapped;

    private Protobuf(${this.protobufClassName($schema)} wrapped) {
      this.wrapped = wrapped;
    }

    @Override public ${this.protobufClassName($schema)} get() { return wrapped; }

    @Override public boolean equals(Object other) {
      if (other == this) return true;
      if (other == null || !(other instanceof ${this.anoaInterfaceFullName($schema)})) return false;
      return wrapped.getNumber() == ((${this.anoaInterfaceFullName($schema)}) other).getOrdinal();
    }

    @Override public int hashCode() { return wrapped.getNumber(); }

    @Override public String toString() { return wrapped.toString(); }

    static public final long serialVersionUID = ${this.version($schema)};
  }

  /** Returns enum instance for the given ${this.anoaInterfaceName($schema)}. */
  static ${this.anoaInterfaceFullName($schema)}<${this.protobufClassName($schema)}> protobuf(${this.anoaInterfaceFullName($schema)}<?> instance) {
    return protobuf(instance.getOrdinal());
  }

  /** Returns enum instance for the given Protobuf enum. */
  static ${this.anoaInterfaceFullName($schema)}<${this.protobufClassName($schema)}> protobuf(${this.protobufClassName($schema)} instance) {
    return protobuf(instance.getNumber());
  }

  /** Returns enum instance for the given ordinal, defaults to first enum value. */
  static ${this.anoaInterfaceFullName($schema)}<${this.protobufClassName($schema)}> protobuf(int ordinal) {
    switch (ordinal) {
#set( $i = 0 )
#foreach ($symbol in ${schema.getEnumSymbols()})
      case $i: return Protobuf.${this.mangle($symbol)};
#set( $i = $i + 1 )
#end
    }
    return Protobuf.${this.mangle($schema.getEnumSymbols().get(0))};
  }

  /** Returns enum instance for the given label, defaults to first enum value. */
  static ${this.anoaInterfaceFullName($schema)}<${this.protobufClassName($schema)}> protobuf(java.lang.CharSequence str) {
    if (str != null) {
      switch (str.toString().toUpperCase()) {
#set( $i = 0 )
#foreach ($symbol in ${schema.getEnumSymbols()})
        case "${this.mangle($symbol)}": return Protobuf.${this.mangle($symbol)};
#set( $i = $i + 1 )
#end
      }
    }
    return Protobuf.${this.mangle($schema.getEnumSymbols().get(0))};
  }

  /** Returns Protobuf class for this enum. */
  static java.lang.Class<${this.protobufClassName($schema)}> getProtobufClass() {
    return ${this.protobufClassName($schema)}.class;
  }

  /** Returns Protobuf protocol class for this enum. */
  static java.lang.Class<${this.protobufProtocolClassName()}> getProtobufProtocolClass() {
    return ${this.protobufProtocolClassName()}.class;
  }

  /** Returns Protobuf descriptor for this enum. */
  static com.google.protobuf.Descriptors.EnumDescriptor getProtobufDescriptor() {
    return ${this.protobufClassName($schema)}.getDescriptor();
  }

  /** Returns Protobuf protocol descriptor for this enum. */
  static com.google.protobuf.Descriptors.FileDescriptor getProtobufProtocolDescriptor() {
    return ${this.protobufProtocolClassName()}.getDescriptor();
  }
#end
#if ($this.isWithThrift())

#if ($this.isDeprecated($schema))
  @Deprecated
#end
  static class Thrift implements ${this.anoaInterfaceFullName($schema)}<${this.thriftClassName($schema)}> {

#foreach ($symbol in ${schema.getEnumSymbols()})
    static public Thrift ${this.mangle($symbol)} = new Thrift(${this.thriftClassName($schema)}.${this.mangle($symbol)});
#end

    private Thrift(${this.thriftClassName($schema)} wrapped) {
      this.wrapped = wrapped;
    }

    final private ${this.thriftClassName($schema)} wrapped;

    @Override public ${this.thriftClassName($schema)} get() { return wrapped; }

    @Override public boolean equals(Object other) {
      if (other == this) return true;
      if (other == null || !(other instanceof ${this.anoaInterfaceFullName($schema)})) return false;
      return wrapped.getValue() == ((${this.anoaInterfaceFullName($schema)}) other).getOrdinal();
    }

    @Override public int hashCode() { return wrapped.getValue(); }

    @Override public String toString() { return wrapped.toString(); }

    static public final long serialVersionUID = ${this.version($schema)};
  }

  /** Returns enum instance for the given ${this.anoaInterfaceName($schema)}. */
  static ${this.anoaInterfaceFullName($schema)}<${this.thriftClassName($schema)}> thrift(${this.anoaInterfaceFullName($schema)}<?> instance) {
    return thrift(instance.getOrdinal());
  }

  /** Returns enum instance for the given Thrift enum. */
  static ${this.anoaInterfaceFullName($schema)}<${this.thriftClassName($schema)}> thrift(${this.thriftClassName($schema)} instance) {
    return thrift(instance.ordinal());
  }

  /** Returns enum instance for the given ordinal, defaults to first enum value. */
  static ${this.anoaInterfaceFullName($schema)}<${this.thriftClassName($schema)}> thrift(int ordinal) {
    switch (ordinal) {
#set( $i = 0 )
#foreach ($symbol in ${schema.getEnumSymbols()})
      case $i: return Thrift.${this.mangle($symbol)};
#set( $i = $i + 1 )
#end
    }
    return Thrift.${this.mangle($schema.getEnumSymbols().get(0))};
  }

  /** Returns enum instance for the given label, defaults to first enum value. */
  static ${this.anoaInterfaceFullName($schema)}<${this.thriftClassName($schema)}> thrift(java.lang.CharSequence str) {
    if (str != null) {
      switch (str.toString().toUpperCase()) {
#set( $i = 0 )
#foreach ($symbol in ${schema.getEnumSymbols()})
        case "${this.mangle($symbol)}": return Thrift.${this.mangle($symbol)};
#set( $i = $i + 1 )
#end
      }
    }
    return Thrift.${this.mangle($schema.getEnumSymbols().get(0))};
  }

  /** Returns Thrift class for this enum. */
  static java.lang.Class<${this.thriftClassName($schema)}> getThriftClass() {
    return ${this.thriftClassName($schema)}.class;
  }
#end
}
