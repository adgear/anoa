#if ($schema.getNamespace())
package $schema.getNamespace();
#end

#if ($schema.getDoc())
/** $schema.getDoc() */
#end
#if ($this.isDeprecated($schema))
@Deprecated
#end
#foreach ($annotation in $this.javaAnnotations($schema))
@$annotation
#end
public interface ${this.mangle($schema.getName())}<T> {

#if ($this.isWithAvro())
  /** Returns Avro class for this enum. */
  public static Class<${this.avroClassName($schema)}> getAvroClass() {
    return ${this.avroClassName($schema)}.class;
  }

  /** Returns Avro schema for this enum. */
  public static org.apache.avro.Schema getAvroSchema() {
    return ${this.avroClassName($schema)}.SCHEMA$;
  }

  /** Returns Avro enum instance for the given ordinal, defaults to first enum value. */
  public static ${this.avroClassName($schema)} findAvroEnum(java.lang.Integer ordinal) {
    return ${this.avroClassName($schema)}.fromInteger(ordinal);
  }

  /** Returns Avro enum instance for the given label, defaults to first enum value. */
  public static ${this.avroClassName($schema)} findAvroEnum(java.lang.CharSequence str) {
    return ${this.avroClassName($schema)}.fromString(str);
  }

  /** Wraps an Avro object. */
  public static ${this.mangle($schema.getName())} fromAvro(${this.avroClassName($schema)} o) {
    return new ${this.mangle($schema.getName())}<${this.avroClassName($schema)}>() {

      @Override
      public boolean isAvro() { return true; }

      @Override
      public ${this.avroClassName($schema)} get() { return o; }

      @Override
      public int getOrdinal() { return o.ordinal(); }
    };
  }

#end
#if ($this.isWithProtobuf())
  /** Returns Protobuf class for this enum. */
  public static Class<${this.protobufClassName($schema)}> getProtobufClass() {
    return ${this.protobufClassName($schema)}.class;
  }

  /** Returns Protobuf descriptor for this enum. */
  public static com.google.protobuf.Descriptors.EnumDescriptor getProtobufDescriptor() {
    return ${this.protobufClassName($schema)}.getDescriptor();
  }

  /** Returns Protobuf enum instance for the given ordinal, defaults to first enum value. */
  public static ${this.protobufClassName($schema)} findProtobufEnum(int ordinal) {
    ${this.protobufClassName($schema)} result = ${this.protobufClassName($schema)}.valueOf(ordinal);
    return (result == null) ? ${this.protobufClassName($schema)}.valueOf(0) : result;
  }

  /** Wraps a Protobuf object. */
  public static ${this.mangle($schema.getName())} fromProtobuf(${this.protobufClassName($schema)} o) {
    return new ${this.mangle($schema.getName())}<${this.protobufClassName($schema)}>() {

      @Override
      public boolean isProtobuf() { return true; }

      @Override
      public ${this.protobufClassName($schema)} get() { return o; }

      @Override
      public int getOrdinal() { return o.getNumber(); }
    };
  }

#end
#if ($this.isWithThrift())
  /** Returns Thrift class for this enum. */
  public static Class<${this.thriftClassName($schema)}> getThriftClass() {
    return ${this.thriftClassName($schema)}.class;
  }

  /** Returns Thrift enum instance for the given ordinal, defaults to first enum value. */
  public static ${this.thriftClassName($schema)} findThriftEnum(int ordinal) {
    return ${this.thriftClassName($schema)}.findByValue(ordinal);
  }

  /** Wraps a Thrift object. */
  public static ${this.mangle($schema.getName())} fromThrift(${this.thriftClassName($schema)} o) {
    return new ${this.mangle($schema.getName())}<${this.thriftClassName($schema)}>() {

      @Override
      public boolean isThrift() { return true; }

      @Override
      public ${this.thriftClassName($schema)} get() { return o; }

      @Override
      public int getOrdinal() { return o.getValue(); }
    };
  }
#end

  default boolean isAvro() { return false; }
  default boolean isProtobuf() { return false; }
  default boolean isThrift() { return false; }

  /** Returns underlying enumeration object. */
  T get();

  /** Returns enumeration ordinal. */
  int getOrdinal();
}
