#if ($schema.getNamespace())
package $schema.getNamespace();
#end

#if ($schema.getDoc())
/** $schema.getDoc() */
#end
#if ($this.isDeprecated($schema))
@Deprecated
#end
#foreach ($annotation in $this.javaAnnotations($schema))
@$annotation
#end
@org.apache.avro.specific.AvroGenerated
final public class ${this.mangle($schema.getName())} extends org.apache.avro.specific.SpecificRecordBase {

#foreach ($field in ${this.fields($schema)})
#if ($field.doc())
  /** $field.doc() */
#end
#foreach ($annotation in $this.javaAnnotations($field))
  @$annotation
#end
  ${this.avroType($field.schema())} ${this.mangle($field.name())};
#end

  private boolean _frozen = false;

  /** Default constructor, does not initialize fields to their default values from the schema. Only use this if you know what you are doing. */
  public ${this.mangle($schema.getName())}() {}

  public ${this.mangle($schema.getName())} freeze() {
    _frozen = true;
#foreach ($field in ${this.fields($schema)})
#if ($this.isRecursiveFreeze($field))
    ${this.recursiveFreeze($field)};
#end
#end
    return this;
  }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter. Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
#set ($i = 0)
#foreach ($field in ${this.fields($schema)})
      case $i: return ${this.mangle($field.name())};
#set ($i = $i + 1)
#end
      default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /** Writes record to Avro Encoder. */
  public void encode(org.apache.avro.io.Encoder _encoder) throws java.io.IOException {
#foreach ($field in ${this.fields($schema)})
    ${this.fieldEncoder($field)}
#end
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    if (_frozen) {
      throw new org.apache.avro.AvroRuntimeException("this Anoa SpecificRecord instance has already been frozen.");
    }
    switch (field$) {
#set ($i = 0)
#foreach ($field in ${this.fields($schema)})
      case $i: ${this.mangle($field.name())} = (${this.avroType($field.schema())}) value$; break;
#set ($i = $i + 1)
#end
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /** Reads record from Avro Decoder. */
  public ${this.mangle($schema.getName())} decode(org.apache.avro.io.Decoder _decoder) throws java.io.IOException {
    if (_frozen) {
      throw new org.apache.avro.AvroRuntimeException("this Anoa SpecificRecord instance has already been frozen.");
    }
#foreach ($field in ${this.fields($schema)})
    ${this.fieldDecoder($field)}
#end
    return freeze();
  }

  /**
   * RecordBuilder for Avro instances.
   */
  static public class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<${this.mangle($schema.getName())}> implements org.apache.avro.data.RecordBuilder<${this.mangle($schema.getName())}> {

#foreach ($field in ${this.fields($schema)})
    private ${this.avroType($field.schema())} ${this.mangle($field.name())};
#end

    public Builder() {
      super(${this.mangle($schema.getName())}.SCHEMA$);
    }

    public Builder(${this.mangle($schema.getName())}.Builder other) {
      super(other);
#foreach ($field in ${this.fields($schema)})
      if (isValidValue(fields()[$field.pos()], other.${this.mangle($field.name())})) {
        this.${this.mangle($field.name())} = data().deepCopy(fields()[$field.pos()].schema(), other.${this.mangle($field.name())});
        fieldSetFlags()[$field.pos()] = true;
      }
#end
    }

    public Builder(${this.mangle($schema.getName())} other) {
      super(${this.mangle($schema.getName())}.SCHEMA$);
#foreach ($field in ${this.fields($schema)})
      if (isValidValue(fields()[$field.pos()], other.${this.mangle($field.name())})) {
        this.${this.mangle($field.name())} = data().deepCopy(fields()[$field.pos()].schema(), other.${this.mangle($field.name())});
        fieldSetFlags()[$field.pos()] = true;
      }
#end
    }
#foreach ($field in ${this.fields($schema)})

    /** Gets the value of the '${this.mangle($field.name())}' field. */
#if ($this.isDeprecated($field))
    @Deprecated
#end
    public ${this.avroType($field.schema())} ${this.generateGetMethod($schema, $field)}() {
      return ${this.mangle($field.name())};
    }

    /** Sets the value of the '${this.mangle($field.name())}' field. */
#if ($this.isDeprecated($field))
    @Deprecated
#end
    public ${this.mangle($schema.getName())}.Builder ${this.generateSetMethod($schema, $field)}(${this.avroType($field.schema())} value) {
      validate(fields()[$field.pos()], value);
      this.${this.mangle($field.name())} = value;
      fieldSetFlags()[$field.pos()] = true;
      return this;
    }

    /** Checks whether the '${this.mangle($field.name())}' field has been set. */
#if ($this.isDeprecated($field))
    @Deprecated
#end
    public boolean ${this.generateHasMethod($schema, $field)}() {
      return fieldSetFlags()[$field.pos()];
    }

    /** Clears the value of the '${this.mangle($field.name())}' field. */
#if ($this.isDeprecated($field))
    @Deprecated
#end
    public ${this.mangle($schema.getName())}.Builder ${this.generateClearMethod($schema, $field)}() {
#if (${this.isUnboxedJavaTypeNullable($field.schema())})
      ${this.mangle($field.name())} = null;
#end
      fieldSetFlags()[$field.pos()] = false;
      return this;
    }
#foreach ($alias in $field.aliases())

    @Deprecated
    public ${this.avroType($field.schema())} ${this.generateGetMethod($schema, $this.aliasField($field, $alias))}() {
      return ${this.generateGetMethod($schema, $field)}();
    }

    @Deprecated
    public ${this.mangle($schema.getName())}.Builder ${this.generateSetMethod($schema, $this.aliasField($field, $alias))}(${this.avroType($field.schema())} value) {
      return ${this.generateSetMethod($schema, $field)}(value);
    }

    @Deprecated
    public boolean ${this.generateHasMethod($schema, $this.aliasField($field, $alias))}() {
      return ${this.generateHasMethod($schema, $field)}();
    }

    @Deprecated
    public ${this.mangle($schema.getName())}.Builder ${this.generateClearMethod($schema, $this.aliasField($field, $alias))}() {
      return ${this.generateClearMethod($schema, $field)}();
    }
#end
#end

    @Override
    public ${this.mangle($schema.getName())} build() {
      final ${this.mangle($schema.getName())} record;
      try {
        record = new ${this.mangle($schema.getName())}();
#foreach ($field in ${this.fields($schema)})
        record.${this.mangle($field.name())} = fieldSetFlags()[$field.pos()] ? this.${this.mangle($field.name())} : (${this.avroType($field.schema())}) defaultValue(fields()[$field.pos()]);
#end
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
      return record.freeze();
    }
  }

  /** Creates a new ${this.mangle($schema.getName())} RecordBuilder. */
  static public ${this.mangle($schema.getName())}.Builder newBuilder() {
    return new ${this.mangle($schema.getName())}.Builder();
  }

  /** Creates a new ${this.mangle($schema.getName())} RecordBuilder by copying an existing ${this.mangle($schema.getName())}.Builder instance. */
  static public ${this.mangle($schema.getName())}.Builder newBuilder(${this.mangle($schema.getName())}.Builder other) {
    return new ${this.mangle($schema.getName())}.Builder(other);
  }

  /** Creates a new ${this.mangle($schema.getName())} RecordBuilder by copying an existing ${this.mangle($schema.getName())} instance. */
  static public ${this.mangle($schema.getName())}.Builder newBuilder(${this.mangle($schema.getName())} other) {
    return new ${this.mangle($schema.getName())}.Builder(other);
  }

  /** Returns Avro record schema. */
  static public org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  static public final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(${this.escapedSchema($schema)});
}
