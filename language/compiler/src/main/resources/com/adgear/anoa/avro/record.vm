##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
#if ($schema.getNamespace())
package $schema.getNamespace();
#end
@SuppressWarnings("all")
#if ($schema.getDoc())
/** $schema.getDoc() */
#end
#if ($this.isDeprecated($schema))@Deprecated
#end
#foreach ($annotation in $this.javaAnnotations($schema))
@$annotation
#end
@org.apache.avro.specific.AvroGenerated
public class ${this.mangle($schema.getName())} extends org.apache.avro.specific.SpecificRecordBase implements ${this.anoaInterfaceFullName($schema)}<${this.mangle($schema.getName())}> {

  static public final long serialVersionUID = ${this.getVersion($schema)};
  static public org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private byte[] _binaryEncoding;
  transient private java.nio.ByteBuffer _binaryEncodingBuffer;

#foreach ($field in $schema.getFields())
#if ($field.doc())
  /** $field.doc() */
#end
#foreach ($annotation in $this.javaAnnotations($field))
  @$annotation
#end
  transient private ${this.avroType($field.schema())} ${this.mangle($field.name())};
#if ($this.isUnboxedJavaTypeNullable($field.schema()))
  transient private ${this.viewType($field.schema())} _view_${this.mangle($field.name())};
#end
#end

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    if (!isLocked()) {
      lock();
    }
    out.defaultWriteObject();
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    in.defaultReadObject();
    byte[] bytes = _binaryEncoding;
    _binaryEncoding = null;
    _DECODER.get().decode(this, bytes);
    lock(bytes);
  }

  private boolean isLocked() {
    return _binaryEncoding != null;
  }

  private void lock() {
    try {
      lock(_ENCODER.get().encode(this));
    } catch (java.io.IOException e) {
      throw new java.io.UncheckedIOException(e);
    }
  }

  private void lock(byte[] binaryEncoding) {
    _binaryEncoding = binaryEncoding;
    _binaryEncodingBuffer = java.nio.ByteBuffer.wrap(get()._binaryEncoding).asReadOnlyBuffer();
#foreach ($field in $schema.getFields())
#if ($this.isUnboxedJavaTypeNullable($field.schema()))
    _view_${this.mangle($field.name())} = ${this.getView($field)};
#end
#end
  }

  /**
   * Default constructor, does not initialize fields to their default values from the schema.
   *
   * @deprecated
   * Use builder static methods instead.
   */
  @Deprecated
  public ${this.mangle($schema.getName())}() {}

  /**
   * Constructs a new instance based on its canonical binary encoding.
   *
   * @param binaryEncoding  Field values encoded by Avro BinaryEncoder. Owned by the instance.
   *
   * @deprecated
   * Only use this if you know what you are doing.
   */
  @Deprecated
  public ${this.mangle($schema.getName())}(byte[] binaryEncoding) {
    try {
      _DECODER.get().decode(this, binaryEncoding);
    } catch (java.io.IOException e) {
      throw new java.io.UncheckedIOException(e);
    }
    lock(binaryEncoding);
  }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter. Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
#set ($i = 0)
#foreach ($field in $schema.getFields())
    case $i: return ${this.mangle($field.name())};
#set ($i = $i + 1)
#end
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    if (isLocked()) {
      throw new org.apache.avro.AvroRuntimeException("This record has already been locked.");
    }
    switch (field$) {
#set ($i = 0)
#foreach ($field in $schema.getFields())
    case $i: ${this.mangle($field.name())} = (${this.avroType($field.schema())}) value$; break;
#set ($i = $i + 1)
#end
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /** Returns an Avro binary encoding of this record. */
  public byte[] copyBinaryEncoding() {
    return (byte[]) get()._binaryEncoding.clone();
  }

  /** Returns the Avro binary encoding of this record wrapped in a read-only buffer. */
  public java.nio.ByteBuffer getBinaryEncoding() {
    return get()._binaryEncodingBuffer;
  }

  @Override
  public boolean isAvro() { return true; }

  @Override
  public ${this.mangle($schema.getName())} get() {
    if (!isLocked()) {
      lock();
    }
    return this;
  }

#foreach ($field in $schema.getFields())
  /**
   * Gets the value of the '${this.mangle($field.name())}' field.
#if ($field.doc())   * $field.doc()
#end
   */
  @Override
#if ($this.isDeprecated($field))  @Deprecated
#end
  public ${this.viewType($field.schema())} ${this.generateGetMethod($schema, $field)}() {
    return #if ($this.isUnboxedJavaTypeNullable($field.schema()))get()._view_${this.mangle($field.name())}#else${this.mangle($field.name())}#end;
  }
#foreach ($alias in $field.aliases())
  @Deprecated
  public ${this.viewType($field.schema())} ${this.generateGetMethod($schema, ${this.getAliasField($field, $alias)})}() {
    return #if ($this.isUnboxedJavaTypeNullable($field.schema()))get()._view_${this.mangle($field.name())}#else${this.mangle($field.name())}#end;
  }
#end

#end
  /** Creates a new ${this.mangle($schema.getName())} RecordBuilder */
  static public ${schema.getNamespace()}.${this.mangle($schema.getName())}.Builder newBuilder() {
    return new ${schema.getNamespace()}.${this.mangle($schema.getName())}.Builder();
  }

  /** Creates a new ${this.mangle($schema.getName())} RecordBuilder by copying an existing Builder */
  static public ${schema.getNamespace()}.${this.mangle($schema.getName())}.Builder newBuilder(${schema.getNamespace()}.${this.mangle($schema.getName())}.Builder other) {
    return new ${schema.getNamespace()}.${this.mangle($schema.getName())}.Builder(other);
  }

  /** Creates a new ${this.mangle($schema.getName())} RecordBuilder by copying an existing ${this.anoaInterfaceFullName($schema)} instance */
  static public ${schema.getNamespace()}.${this.mangle($schema.getName())}.Builder newBuilder(${schema.getNamespace()}.${this.mangle($schema.getName())} other) {
    return new ${schema.getNamespace()}.${this.mangle($schema.getName())}.Builder(other);
  }

  /**
   * RecordBuilder for ${this.mangle($schema.getName())} instances.
   */
  static public class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<${this.mangle($schema.getName())}> implements org.apache.avro.data.RecordBuilder<${this.mangle($schema.getName())}> {

#foreach ($field in $schema.getFields())
    private ${this.avroType($field.schema())} ${this.mangle($field.name())};
#end

    /** Creates a new Builder */
    private Builder() {
      super(${schema.getNamespace()}.${this.mangle($schema.getName())}.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(${schema.getNamespace()}.${this.mangle($schema.getName())}.Builder other) {
      super(other);
#foreach ($field in $schema.getFields())
      if (isValidValue(fields()[$field.pos()], other.${this.mangle($field.name())})) {
        this.${this.mangle($field.name())} = data().deepCopy(fields()[$field.pos()].schema(), other.${this.mangle($field.name())});
        fieldSetFlags()[$field.pos()] = true;
      }
#end
    }

    /** Creates a Builder by copying an existing ${schema.getNamespace()}.${this.mangle($schema.getName())} instance */
    private Builder(${schema.getNamespace()}.${this.mangle($schema.getName())} other) {
      super(${schema.getNamespace()}.${this.mangle($schema.getName())}.SCHEMA$);
#foreach ($field in $schema.getFields())
      if (isValidValue(fields()[$field.pos()], other.${this.mangle($field.name())})) {
        this.${this.mangle($field.name())} = data().deepCopy(fields()[$field.pos()].schema(), other.${this.mangle($field.name())});
        fieldSetFlags()[$field.pos()] = true;
      }
#end
    }

#foreach ($field in $schema.getFields())
    /** Gets the value of the '${this.mangle($field.name())}' field */
#if ($this.isDeprecated($field))    @Deprecated
#end
    public ${this.avroType($field.schema())} ${this.generateGetMethod($schema, $field)}() {
      return ${this.mangle($field.name())};
    }
#foreach ($alias in $field.aliases())
    @Deprecated
    public ${this.avroType($field.schema())} ${this.generateGetMethod($schema, $this.getAliasField($field, $alias))}() {
      return ${this.generateGetMethod($schema, $field)}();
    }
#end

    /** Sets the value of the '${this.mangle($field.name())}' field */
#if ($this.isDeprecated($field))    @Deprecated
#end
    public ${schema.getNamespace()}.${this.mangle($schema.getName())}.Builder ${this.generateSetMethod($schema, $field)}(${this.avroType($field.schema())} value) {
      validate(fields()[$field.pos()], value);
      this.${this.mangle($field.name())} = value;
      fieldSetFlags()[$field.pos()] = true;
      return this;
    }
#foreach ($alias in $field.aliases())
    @Deprecated
    public ${schema.getNamespace()}.${this.mangle($schema.getName())}.Builder ${this.generateSetMethod($schema, $this.getAliasField($field, $alias))}(${this.avroType($field.schema())} value) {
      return ${this.generateSetMethod($schema, $field)}(value);
    }
#end

    /** Checks whether the '${this.mangle($field.name())}' field has been set */
#if ($this.isDeprecated($field))    @Deprecated
#end
    public boolean ${this.generateHasMethod($schema, $field)}() {
      return fieldSetFlags()[$field.pos()];
    }
#foreach ($alias in $field.aliases())
    @Deprecated
    public boolean ${this.generateHasMethod($schema, $this.getAliasField($field, $alias))}() {
      return ${this.generateHasMethod($schema, $field)}();
    }
#end

    /** Clears the value of the '${this.mangle($field.name())}' field */
#if ($this.isDeprecated($field))    @Deprecated
#end
    public ${schema.getNamespace()}.${this.mangle($schema.getName())}.Builder ${this.generateClearMethod($schema, $field)}() {
#if (${this.isUnboxedJavaTypeNullable($field.schema())})
      ${this.mangle($field.name())} = null;
#end
      fieldSetFlags()[$field.pos()] = false;
      return this;
    }
#foreach ($alias in $field.aliases())
    @Deprecated
    public ${schema.getNamespace()}.${this.mangle($schema.getName())}.Builder ${this.generateClearMethod($schema, $this.getAliasField($field, $alias))}() {
      return ${this.generateClearMethod($schema, $field)}();
    }
#end

#end
    @Override
    public ${this.mangle($schema.getName())} build() {
      final ${this.mangle($schema.getName())} record;
      try {
        record = new ${this.mangle($schema.getName())}(#if ($schema.isError())getValue(), getCause()#end);
#foreach ($field in $schema.getFields())
        record.${this.mangle($field.name())} = fieldSetFlags()[$field.pos()] ? this.${this.mangle($field.name())} : (${this.avroType($field.schema())}) defaultValue(fields()[$field.pos()]);
#end
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
      record.lock();
      return record;
    }
  }

  /**
   * Utility class for deserializing ${this.mangle($schema.getName())} instances from Avro binary encoding.
   * Not thread safe.
   */
  static public class Decoder {
    final private org.apache.avro.io.BinaryDecoder decoder = org.apache.avro.io.DecoderFactory.get().binaryDecoder(new byte[0], null);
    final private org.apache.avro.specific.SpecificDatumReader<${this.mangle($schema.getName())}> reader = new org.apache.avro.specific.SpecificDatumReader<>(${this.mangle($schema.getName())}.class);
    public ${this.mangle($schema.getName())} decode(${this.mangle($schema.getName())} instance, byte[] bytes) throws java.io.IOException {
      return reader.read(instance, org.apache.avro.io.DecoderFactory.get().binaryDecoder(bytes, decoder));
    }
  }

  static private java.lang.ThreadLocal<Decoder> _DECODER = new java.lang.ThreadLocal<Decoder>() {
    @Override protected Decoder initialValue() { return new Decoder(); }
  };

  /**
   * Utility class for serializing ${this.mangle($schema.getName())} instances into Avro binary encoding.
   * Not thread safe.
   */
  static public class Encoder {
    final private java.io.ByteArrayOutputStream stream = new java.io.ByteArrayOutputStream();
    final private org.apache.avro.io.BinaryEncoder encoder = org.apache.avro.io.EncoderFactory.get().binaryEncoder(stream, null);
    final private org.apache.avro.specific.SpecificDatumWriter<${this.mangle($schema.getName())}> writer = new org.apache.avro.specific.SpecificDatumWriter<>(${this.mangle($schema.getName())}.class);
    public byte[] encode(${this.mangle($schema.getName())} instance) throws java.io.IOException {
      stream.reset();
      writer.write(instance, encoder);
      encoder.flush();
      return stream.toByteArray();
    }
  }

  static private java.lang.ThreadLocal<Encoder> _ENCODER = new java.lang.ThreadLocal<Encoder>() {
    @Override protected Encoder initialValue() { return new Encoder(); }
  };

  static public final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse(${this.javaSplit($schema.toString())});
}
